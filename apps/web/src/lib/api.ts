/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * Task API
 * A simple task management API
 * OpenAPI spec version: 1.0.0
 */
export type GetTasks200ItemsItem = {
  /** タスクID */
  id: string;
  /** タスク名 */
  name: string;
};

export type GetTasks200 = {
  /** タスクのリスト */
  items: GetTasks200ItemsItem[];
};

export type PostUsersRegisterBody = {
  /**
   * ユーザー名
   * @minLength 1
   */
  name: string;
  /** メールアドレス */
  email: string;
  /**
   * パスワード（8文字以上128文字以下、大文字・小文字・数字・特殊文字を含む）
   * @minLength 8
   * @maxLength 128
   */
  password: string;
};

export type PostUsersRegister200 = {
  /** 作成されたユーザーID */
  userId: string;
};

export type PostUsersRegister400 = {
  /** エラーメッセージ */
  errors: string[];
};

export type PostUsersLoginBody = {
  /** メールアドレス */
  email: string;
  /**
   * パスワード
   * @minLength 1
   */
  password: string;
};

/**
 * ユーザーロール
 */
export type PostUsersLogin200UserRole =
  (typeof PostUsersLogin200UserRole)[keyof typeof PostUsersLogin200UserRole];

export const PostUsersLogin200UserRole = {
  MEMBER: "MEMBER",
  ADMIN: "ADMIN",
} as const;

export type PostUsersLogin200User = {
  /** ユーザーID */
  id: string;
  /** ユーザー名 */
  name: string;
  /** メールアドレス */
  email: string;
  /** ユーザーロール */
  role: PostUsersLogin200UserRole;
};

export type PostUsersLogin200 = {
  user: PostUsersLogin200User;
};

export type PostUsersLogin401 = {
  /** エラーメッセージ */
  errors: string[];
};

export type PostUsersLogout200 = {
  /** ログアウト完了メッセージ */
  message: string;
};

/**
 * すべてのタスクのリストを取得します
 * @summary すべてのタスクを取得
 */
export type getTasksResponse200 = {
  data: GetTasks200;
  status: 200;
};

export type getTasksResponseComposite = getTasksResponse200;

export type getTasksResponse = getTasksResponseComposite & {
  headers: Headers;
};

export const getGetTasksUrl = () => {
  return `http://localhost:3000/tasks`;
};

export const getTasks = async (
  options?: RequestInit,
): Promise<getTasksResponse> => {
  const res = await fetch(getGetTasksUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getTasksResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as getTasksResponse;
};

/**
 * 新しいユーザーを登録します。

パスワード要件:
- 8文字以上128文字以下
- 大文字を1文字以上含む
- 小文字を1文字以上含む  
- 数字を1文字以上含む
- 特殊文字を1文字以上含む (!@#$%^&*()_+-=[]{};"\|,.<>/?)

新しいユーザーはデフォルトで「member」ロールが割り当てられます。
 * @summary ユーザー登録
 */
export type postUsersRegisterResponse200 = {
  data: PostUsersRegister200;
  status: 200;
};

export type postUsersRegisterResponse400 = {
  data: PostUsersRegister400;
  status: 400;
};

export type postUsersRegisterResponseComposite =
  | postUsersRegisterResponse200
  | postUsersRegisterResponse400;

export type postUsersRegisterResponse = postUsersRegisterResponseComposite & {
  headers: Headers;
};

export const getPostUsersRegisterUrl = () => {
  return `http://localhost:3000/users/register`;
};

export const postUsersRegister = async (
  postUsersRegisterBody: PostUsersRegisterBody,
  options?: RequestInit,
): Promise<postUsersRegisterResponse> => {
  const res = await fetch(getPostUsersRegisterUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postUsersRegisterBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postUsersRegisterResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postUsersRegisterResponse;
};

/**
 * ユーザーのログインを行います。

認証に成功すると、アクセストークン（30分有効）とリフレッシュトークン（30日有効）が
HTTPOnlyクッキーとして設定されます。
 * @summary ユーザーログイン
 */
export type postUsersLoginResponse200 = {
  data: PostUsersLogin200;
  status: 200;
};

export type postUsersLoginResponse401 = {
  data: PostUsersLogin401;
  status: 401;
};

export type postUsersLoginResponseComposite =
  | postUsersLoginResponse200
  | postUsersLoginResponse401;

export type postUsersLoginResponse = postUsersLoginResponseComposite & {
  headers: Headers;
};

export const getPostUsersLoginUrl = () => {
  return `http://localhost:3000/users/login`;
};

export const postUsersLogin = async (
  postUsersLoginBody: PostUsersLoginBody,
  options?: RequestInit,
): Promise<postUsersLoginResponse> => {
  const res = await fetch(getPostUsersLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(postUsersLoginBody),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postUsersLoginResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postUsersLoginResponse;
};

/**
 * ユーザーのログアウトを行い、認証クッキーをクリアします。
 * @summary ユーザーログアウト
 */
export type postUsersLogoutResponse200 = {
  data: PostUsersLogout200;
  status: 200;
};

export type postUsersLogoutResponseComposite = postUsersLogoutResponse200;

export type postUsersLogoutResponse = postUsersLogoutResponseComposite & {
  headers: Headers;
};

export const getPostUsersLogoutUrl = () => {
  return `http://localhost:3000/users/logout`;
};

export const postUsersLogout = async (
  options?: RequestInit,
): Promise<postUsersLogoutResponse> => {
  const res = await fetch(getPostUsersLogoutUrl(), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postUsersLogoutResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postUsersLogoutResponse;
};
