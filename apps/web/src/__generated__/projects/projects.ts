/* eslint-disable */
/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Task API
 * A simple task management API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  GetProjects200,
  GetProjectsParams,
  PostProjects201,
  PostProjectsBody,
} from "../api.schemas";

import { customFetch } from "../../lib/custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * „É¶„Éº„Ç∂„Éº„ÅåÂèÇÂä†„Åó„Å¶„ÅÑ„Çã„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆ‰∏ÄË¶ß„Çí„Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥‰ªò„Åç„ÅßÂèñÂæó„Åó„Åæ„Åô„ÄÇ
 * @summary ÂèÇÂä†„Åó„Å¶„ÅÑ„Çã„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß„ÇíÂèñÂæó
 */
export type GetProjectsQueryResponse200 = {
  data: GetProjects200;
  status: 200;
};

export type GetProjectsQueryResponse401 = {
  data: void;
  status: 401;
};

export type GetProjectsQueryResponseComposite =
  | GetProjectsQueryResponse200
  | GetProjectsQueryResponse401;

export type GetProjectsQueryResponse = GetProjectsQueryResponseComposite & {
  headers: Headers;
};

export const getGetProjectsQueryUrl = (params?: GetProjectsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/projects?${stringifiedParams}`
    : `/projects`;
};

export const GetProjectsQuery = async (
  params?: GetProjectsParams,
  options?: RequestInit,
): Promise<GetProjectsQueryResponse> => {
  return customFetch<GetProjectsQueryResponse>(getGetProjectsQueryUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getGetProjectsQueryQueryKey = (params?: GetProjectsParams) => {
  return [`/projects`, ...(params ? [params] : [])] as const;
};

export const getGetProjectsQueryQueryOptions = <
  TData = Awaited<ReturnType<typeof GetProjectsQuery>>,
  TError = void,
>(
  params?: GetProjectsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof GetProjectsQuery>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetProjectsQueryQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof GetProjectsQuery>>
  > = ({ signal }) => GetProjectsQuery(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof GetProjectsQuery>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProjectsQueryQueryResult = NonNullable<
  Awaited<ReturnType<typeof GetProjectsQuery>>
>;
export type GetProjectsQueryQueryError = void;

export function useGetProjectsQuery<
  TData = Awaited<ReturnType<typeof GetProjectsQuery>>,
  TError = void,
>(
  params: undefined | GetProjectsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof GetProjectsQuery>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof GetProjectsQuery>>,
          TError,
          Awaited<ReturnType<typeof GetProjectsQuery>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProjectsQuery<
  TData = Awaited<ReturnType<typeof GetProjectsQuery>>,
  TError = void,
>(
  params?: GetProjectsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof GetProjectsQuery>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof GetProjectsQuery>>,
          TError,
          Awaited<ReturnType<typeof GetProjectsQuery>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProjectsQuery<
  TData = Awaited<ReturnType<typeof GetProjectsQuery>>,
  TError = void,
>(
  params?: GetProjectsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof GetProjectsQuery>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÂèÇÂä†„Åó„Å¶„ÅÑ„Çã„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß„ÇíÂèñÂæó
 */

export function useGetProjectsQuery<
  TData = Awaited<ReturnType<typeof GetProjectsQuery>>,
  TError = void,
>(
  params?: GetProjectsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof GetProjectsQuery>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProjectsQueryQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Êñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê„Åó„Åæ„Åô„ÄÇÁÆ°ÁêÜËÄÖÊ®©Èôê„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ
 * @summary Êñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê
 */
export type PostProjectsMutationResponse201 = {
  data: PostProjects201;
  status: 201;
};

export type PostProjectsMutationResponse403 = {
  data: void;
  status: 403;
};

export type PostProjectsMutationResponseComposite =
  | PostProjectsMutationResponse201
  | PostProjectsMutationResponse403;

export type PostProjectsMutationResponse =
  PostProjectsMutationResponseComposite & {
    headers: Headers;
  };

export const getPostProjectsMutationUrl = () => {
  return `/projects`;
};

export const PostProjectsMutation = async (
  postProjectsBody: PostProjectsBody,
  options?: RequestInit,
): Promise<PostProjectsMutationResponse> => {
  return customFetch<PostProjectsMutationResponse>(
    getPostProjectsMutationUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postProjectsBody),
    },
  );
};

export const getPostProjectsMutationMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof PostProjectsMutation>>,
    TError,
    { data: PostProjectsBody },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof PostProjectsMutation>>,
  TError,
  { data: PostProjectsBody },
  TContext
> => {
  const mutationKey = ["postProjectsMutation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof PostProjectsMutation>>,
    { data: PostProjectsBody }
  > = (props) => {
    const { data } = props ?? {};

    return PostProjectsMutation(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostProjectsMutationMutationResult = NonNullable<
  Awaited<ReturnType<typeof PostProjectsMutation>>
>;
export type PostProjectsMutationMutationBody = PostProjectsBody;
export type PostProjectsMutationMutationError = void;

/**
 * @summary Êñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê
 */
export const usePostProjectsMutation = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof PostProjectsMutation>>,
      TError,
      { data: PostProjectsBody },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof PostProjectsMutation>>,
  TError,
  { data: PostProjectsBody },
  TContext
> => {
  const mutationOptions = getPostProjectsMutationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
