/* eslint-disable */
/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Task API
 * A simple task management API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type { GetProjects200, PostProjects201 } from "../api.schemas";

export const getGetProjectsResponseMock = (
  overrideResponse: Partial<GetProjects200> = {},
): GetProjects200 => ({
  projects: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    createdBy: faker.string.alpha({ length: { min: 10, max: 20 } }),
  })),
  pagination: {
    page: faker.number.int({ min: 1, max: undefined, multipleOf: undefined }),
    limit: faker.number.int({ min: 1, max: 100, multipleOf: undefined }),
    total: faker.number.int({ min: 0, max: undefined, multipleOf: undefined }),
    totalPages: faker.number.int({
      min: 0,
      max: undefined,
      multipleOf: undefined,
    }),
  },
  ...overrideResponse,
});

export const getPostProjectsResponseMock = (
  overrideResponse: Partial<PostProjects201> = {},
): PostProjects201 => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  createdBy: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getGetProjectsMockHandler = (
  overrideResponse?:
    | GetProjects200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetProjects200> | GetProjects200),
) => {
  return http.get("*/projects", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetProjectsResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostProjectsMockHandler = (
  overrideResponse?:
    | PostProjects201
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostProjects201> | PostProjects201),
) => {
  return http.post("*/projects", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostProjectsResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getProjectsMock = () => [
  getGetProjectsMockHandler(),
  getPostProjectsMockHandler(),
];
