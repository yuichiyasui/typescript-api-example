/* eslint-disable */
/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Task API
 * A simple task management API
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";

import type {
  GetUsersSelf200,
  PostUsersLogin200,
  PostUsersLogout200,
  PostUsersRegister200,
} from "../api.schemas";

export const getPostUsersRegisterResponseMock = (
  overrideResponse: Partial<PostUsersRegister200> = {},
): PostUsersRegister200 => ({
  userId: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getPostUsersLoginResponseMock = (
  overrideResponse: Partial<PostUsersLogin200> = {},
): PostUsersLogin200 => ({
  user: {
    id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    email: faker.internet.email(),
    role: faker.helpers.arrayElement(["MEMBER", "ADMIN"] as const),
  },
  ...overrideResponse,
});

export const getPostUsersLogoutResponseMock = (
  overrideResponse: Partial<PostUsersLogout200> = {},
): PostUsersLogout200 => ({
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getGetUsersSelfResponseMock = (
  overrideResponse: Partial<GetUsersSelf200> = {},
): GetUsersSelf200 => ({
  id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  name: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.internet.email(),
  role: faker.helpers.arrayElement(["MEMBER", "ADMIN"] as const),
  ...overrideResponse,
});

export const getPostUsersRegisterMockHandler = (
  overrideResponse?:
    | PostUsersRegister200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostUsersRegister200> | PostUsersRegister200),
) => {
  return http.post("*/users/register", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostUsersRegisterResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostUsersLoginMockHandler = (
  overrideResponse?:
    | PostUsersLogin200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostUsersLogin200> | PostUsersLogin200),
) => {
  return http.post("*/users/login", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostUsersLoginResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostUsersLogoutMockHandler = (
  overrideResponse?:
    | PostUsersLogout200
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<PostUsersLogout200> | PostUsersLogout200),
) => {
  return http.post("*/users/logout", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostUsersLogoutResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetUsersSelfMockHandler = (
  overrideResponse?:
    | GetUsersSelf200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetUsersSelf200> | GetUsersSelf200),
) => {
  return http.get("*/users/self", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUsersSelfResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};
export const getUsersMock = () => [
  getPostUsersRegisterMockHandler(),
  getPostUsersLoginMockHandler(),
  getPostUsersLogoutMockHandler(),
  getGetUsersSelfMockHandler(),
];
