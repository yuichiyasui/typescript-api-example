/* eslint-disable */
/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Task API
 * A simple task management API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  GetUsersSelf200,
  GetUsersSelf401,
  PostUsersLogin200,
  PostUsersLogin400,
  PostUsersLoginBody,
  PostUsersLogout200,
  PostUsersRegister200,
  PostUsersRegister400,
  PostUsersRegisterBody,
} from "../api.schemas";

import { customFetch } from "../../lib/custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Êñ∞„Åó„ÅÑ„É¶„Éº„Ç∂„Éº„ÇíÁôªÈå≤„Åó„Åæ„Åô„ÄÇ

„Éë„Çπ„ÉØ„Éº„ÉâË¶Å‰ª∂:
- 8ÊñáÂ≠ó‰ª•‰∏ä128ÊñáÂ≠ó‰ª•‰∏ã
- Â§ßÊñáÂ≠ó„Çí1ÊñáÂ≠ó‰ª•‰∏äÂê´„ÇÄ
- Â∞èÊñáÂ≠ó„Çí1ÊñáÂ≠ó‰ª•‰∏äÂê´„ÇÄ  
- Êï∞Â≠ó„Çí1ÊñáÂ≠ó‰ª•‰∏äÂê´„ÇÄ
- ÁâπÊÆäÊñáÂ≠ó„Çí1ÊñáÂ≠ó‰ª•‰∏äÂê´„ÇÄ (!@#$%^&*()_+-=[]{};"\|,.<>/?)

Êñ∞„Åó„ÅÑ„É¶„Éº„Ç∂„Éº„ÅØ„Éá„Éï„Ç©„É´„Éà„Åß„Äåmember„Äç„É≠„Éº„É´„ÅåÂâ≤„ÇäÂΩì„Å¶„Çâ„Çå„Åæ„Åô„ÄÇ
 * @summary „É¶„Éº„Ç∂„ÉºÁôªÈå≤
 */
export type PostUsersRegisterMutationResponse200 = {
  data: PostUsersRegister200;
  status: 200;
};

export type PostUsersRegisterMutationResponse400 = {
  data: PostUsersRegister400;
  status: 400;
};

export type PostUsersRegisterMutationResponseComposite =
  | PostUsersRegisterMutationResponse200
  | PostUsersRegisterMutationResponse400;

export type PostUsersRegisterMutationResponse =
  PostUsersRegisterMutationResponseComposite & {
    headers: Headers;
  };

export const getPostUsersRegisterMutationUrl = () => {
  return `/users/register`;
};

export const PostUsersRegisterMutation = async (
  postUsersRegisterBody: PostUsersRegisterBody,
  options?: RequestInit,
): Promise<PostUsersRegisterMutationResponse> => {
  return customFetch<PostUsersRegisterMutationResponse>(
    getPostUsersRegisterMutationUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postUsersRegisterBody),
    },
  );
};

export const getPostUsersRegisterMutationMutationOptions = <
  TError = PostUsersRegister400,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof PostUsersRegisterMutation>>,
    TError,
    { data: PostUsersRegisterBody },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof PostUsersRegisterMutation>>,
  TError,
  { data: PostUsersRegisterBody },
  TContext
> => {
  const mutationKey = ["postUsersRegisterMutation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof PostUsersRegisterMutation>>,
    { data: PostUsersRegisterBody }
  > = (props) => {
    const { data } = props ?? {};

    return PostUsersRegisterMutation(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersRegisterMutationMutationResult = NonNullable<
  Awaited<ReturnType<typeof PostUsersRegisterMutation>>
>;
export type PostUsersRegisterMutationMutationBody = PostUsersRegisterBody;
export type PostUsersRegisterMutationMutationError = PostUsersRegister400;

/**
 * @summary „É¶„Éº„Ç∂„ÉºÁôªÈå≤
 */
export const usePostUsersRegisterMutation = <
  TError = PostUsersRegister400,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof PostUsersRegisterMutation>>,
      TError,
      { data: PostUsersRegisterBody },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof PostUsersRegisterMutation>>,
  TError,
  { data: PostUsersRegisterBody },
  TContext
> => {
  const mutationOptions = getPostUsersRegisterMutationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * „É¶„Éº„Ç∂„Éº„ÅÆ„É≠„Ç∞„Ç§„É≥„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ

Ë™çË®º„Å´ÊàêÂäü„Åô„Çã„Å®„ÄÅ„Ç¢„ÇØ„Çª„Çπ„Éà„Éº„ÇØ„É≥Ôºà30ÂàÜÊúâÂäπÔºâ„Å®„É™„Éï„É¨„ÉÉ„Ç∑„É•„Éà„Éº„ÇØ„É≥Ôºà30Êó•ÊúâÂäπÔºâ„Åå
HTTPOnly„ÇØ„ÉÉ„Ç≠„Éº„Å®„Åó„Å¶Ë®≠ÂÆö„Åï„Çå„Åæ„Åô„ÄÇ
 * @summary „É¶„Éº„Ç∂„Éº„É≠„Ç∞„Ç§„É≥
 */
export type PostUsersLoginMutationResponse200 = {
  data: PostUsersLogin200;
  status: 200;
};

export type PostUsersLoginMutationResponse400 = {
  data: PostUsersLogin400;
  status: 400;
};

export type PostUsersLoginMutationResponseComposite =
  | PostUsersLoginMutationResponse200
  | PostUsersLoginMutationResponse400;

export type PostUsersLoginMutationResponse =
  PostUsersLoginMutationResponseComposite & {
    headers: Headers;
  };

export const getPostUsersLoginMutationUrl = () => {
  return `/users/login`;
};

export const PostUsersLoginMutation = async (
  postUsersLoginBody: PostUsersLoginBody,
  options?: RequestInit,
): Promise<PostUsersLoginMutationResponse> => {
  return customFetch<PostUsersLoginMutationResponse>(
    getPostUsersLoginMutationUrl(),
    {
      ...options,
      method: "POST",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(postUsersLoginBody),
    },
  );
};

export const getPostUsersLoginMutationMutationOptions = <
  TError = PostUsersLogin400,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof PostUsersLoginMutation>>,
    TError,
    { data: PostUsersLoginBody },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof PostUsersLoginMutation>>,
  TError,
  { data: PostUsersLoginBody },
  TContext
> => {
  const mutationKey = ["postUsersLoginMutation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof PostUsersLoginMutation>>,
    { data: PostUsersLoginBody }
  > = (props) => {
    const { data } = props ?? {};

    return PostUsersLoginMutation(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersLoginMutationMutationResult = NonNullable<
  Awaited<ReturnType<typeof PostUsersLoginMutation>>
>;
export type PostUsersLoginMutationMutationBody = PostUsersLoginBody;
export type PostUsersLoginMutationMutationError = PostUsersLogin400;

/**
 * @summary „É¶„Éº„Ç∂„Éº„É≠„Ç∞„Ç§„É≥
 */
export const usePostUsersLoginMutation = <
  TError = PostUsersLogin400,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof PostUsersLoginMutation>>,
      TError,
      { data: PostUsersLoginBody },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof PostUsersLoginMutation>>,
  TError,
  { data: PostUsersLoginBody },
  TContext
> => {
  const mutationOptions = getPostUsersLoginMutationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * „É¶„Éº„Ç∂„Éº„ÅÆ„É≠„Ç∞„Ç¢„Ç¶„Éà„ÇíË°å„ÅÑ„ÄÅË™çË®º„ÇØ„ÉÉ„Ç≠„Éº„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åô„ÄÇ
 * @summary „É¶„Éº„Ç∂„Éº„É≠„Ç∞„Ç¢„Ç¶„Éà
 */
export type PostUsersLogoutMutationResponse200 = {
  data: PostUsersLogout200;
  status: 200;
};

export type PostUsersLogoutMutationResponseComposite =
  PostUsersLogoutMutationResponse200;

export type PostUsersLogoutMutationResponse =
  PostUsersLogoutMutationResponseComposite & {
    headers: Headers;
  };

export const getPostUsersLogoutMutationUrl = () => {
  return `/users/logout`;
};

export const PostUsersLogoutMutation = async (
  options?: RequestInit,
): Promise<PostUsersLogoutMutationResponse> => {
  return customFetch<PostUsersLogoutMutationResponse>(
    getPostUsersLogoutMutationUrl(),
    {
      ...options,
      method: "POST",
    },
  );
};

export const getPostUsersLogoutMutationMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof PostUsersLogoutMutation>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof PostUsersLogoutMutation>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["postUsersLogoutMutation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof PostUsersLogoutMutation>>,
    void
  > = () => {
    return PostUsersLogoutMutation(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostUsersLogoutMutationMutationResult = NonNullable<
  Awaited<ReturnType<typeof PostUsersLogoutMutation>>
>;

export type PostUsersLogoutMutationMutationError = unknown;

/**
 * @summary „É¶„Éº„Ç∂„Éº„É≠„Ç∞„Ç¢„Ç¶„Éà
 */
export const usePostUsersLogoutMutation = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof PostUsersLogoutMutation>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof PostUsersLogoutMutation>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostUsersLogoutMutationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * „É≠„Ç∞„Ç§„É≥„Åó„Å¶„ÅÑ„Çã„É¶„Éº„Ç∂„Éº„ÅÆÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Åæ„Åô„ÄÇ
 * @summary „É≠„Ç∞„Ç§„É≥„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂèñÂæó
 */
export type GetUsersSelfQueryResponse200 = {
  data: GetUsersSelf200;
  status: 200;
};

export type GetUsersSelfQueryResponse401 = {
  data: GetUsersSelf401;
  status: 401;
};

export type GetUsersSelfQueryResponseComposite =
  | GetUsersSelfQueryResponse200
  | GetUsersSelfQueryResponse401;

export type GetUsersSelfQueryResponse = GetUsersSelfQueryResponseComposite & {
  headers: Headers;
};

export const getGetUsersSelfQueryUrl = () => {
  return `/users/self`;
};

export const GetUsersSelfQuery = async (
  options?: RequestInit,
): Promise<GetUsersSelfQueryResponse> => {
  return customFetch<GetUsersSelfQueryResponse>(getGetUsersSelfQueryUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetUsersSelfQueryQueryKey = () => {
  return [`/users/self`] as const;
};

export const getGetUsersSelfQueryQueryOptions = <
  TData = Awaited<ReturnType<typeof GetUsersSelfQuery>>,
  TError = GetUsersSelf401,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof GetUsersSelfQuery>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUsersSelfQueryQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof GetUsersSelfQuery>>
  > = ({ signal }) => GetUsersSelfQuery({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof GetUsersSelfQuery>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUsersSelfQueryQueryResult = NonNullable<
  Awaited<ReturnType<typeof GetUsersSelfQuery>>
>;
export type GetUsersSelfQueryQueryError = GetUsersSelf401;

export function useGetUsersSelfQuery<
  TData = Awaited<ReturnType<typeof GetUsersSelfQuery>>,
  TError = GetUsersSelf401,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof GetUsersSelfQuery>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof GetUsersSelfQuery>>,
          TError,
          Awaited<ReturnType<typeof GetUsersSelfQuery>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersSelfQuery<
  TData = Awaited<ReturnType<typeof GetUsersSelfQuery>>,
  TError = GetUsersSelf401,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof GetUsersSelfQuery>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof GetUsersSelfQuery>>,
          TError,
          Awaited<ReturnType<typeof GetUsersSelfQuery>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUsersSelfQuery<
  TData = Awaited<ReturnType<typeof GetUsersSelfQuery>>,
  TError = GetUsersSelf401,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof GetUsersSelfQuery>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary „É≠„Ç∞„Ç§„É≥„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂèñÂæó
 */

export function useGetUsersSelfQuery<
  TData = Awaited<ReturnType<typeof GetUsersSelfQuery>>,
  TError = GetUsersSelf401,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof GetUsersSelfQuery>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUsersSelfQueryQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
