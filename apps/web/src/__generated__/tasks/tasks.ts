/* eslint-disable */
/**
 * Generated by orval üç∫
 * Do not edit manually.
 * Task API
 * A simple task management API
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { GetTasks200 } from "../api.schemas";

import { customFetch } from "../../lib/custom-fetch";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * „Åô„Åπ„Å¶„ÅÆ„Çø„Çπ„ÇØ„ÅÆ„É™„Çπ„Éà„ÇíÂèñÂæó„Åó„Åæ„Åô
 * @summary „Åô„Åπ„Å¶„ÅÆ„Çø„Çπ„ÇØ„ÇíÂèñÂæó
 */
export type GetTasksQueryResponse200 = {
  data: GetTasks200;
  status: 200;
};

export type GetTasksQueryResponseComposite = GetTasksQueryResponse200;

export type GetTasksQueryResponse = GetTasksQueryResponseComposite & {
  headers: Headers;
};

export const getGetTasksQueryUrl = () => {
  return `/tasks`;
};

export const GetTasksQuery = async (
  options?: RequestInit,
): Promise<GetTasksQueryResponse> => {
  return customFetch<GetTasksQueryResponse>(getGetTasksQueryUrl(), {
    ...options,
    method: "GET",
  });
};

export const getGetTasksQueryQueryKey = () => {
  return [`/tasks`] as const;
};

export const getGetTasksQueryQueryOptions = <
  TData = Awaited<ReturnType<typeof GetTasksQuery>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof GetTasksQuery>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTasksQueryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof GetTasksQuery>>> = ({
    signal,
  }) => GetTasksQuery({ signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof GetTasksQuery>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTasksQueryQueryResult = NonNullable<
  Awaited<ReturnType<typeof GetTasksQuery>>
>;
export type GetTasksQueryQueryError = unknown;

export function useGetTasksQuery<
  TData = Awaited<ReturnType<typeof GetTasksQuery>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof GetTasksQuery>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof GetTasksQuery>>,
          TError,
          Awaited<ReturnType<typeof GetTasksQuery>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTasksQuery<
  TData = Awaited<ReturnType<typeof GetTasksQuery>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof GetTasksQuery>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof GetTasksQuery>>,
          TError,
          Awaited<ReturnType<typeof GetTasksQuery>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTasksQuery<
  TData = Awaited<ReturnType<typeof GetTasksQuery>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof GetTasksQuery>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary „Åô„Åπ„Å¶„ÅÆ„Çø„Çπ„ÇØ„ÇíÂèñÂæó
 */

export function useGetTasksQuery<
  TData = Awaited<ReturnType<typeof GetTasksQuery>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof GetTasksQuery>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTasksQueryQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
